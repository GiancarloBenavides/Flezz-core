///******************************************/
///*          flezz framework 1.0           */
///******************************************/
///*  Name: function
///*  Version: 0.1.0
///*  Author: Giancarlo Ortiz.
///*  URI: http://www.zerez.org
///*  License: GNU General Public License v2 or later
///*  License URI: http://www.gnu.org/licenses/gpl-2.0.html
///******************************************/
@base:         10;
//
///******************************************/
///*       Javascript Functions             */
///******************************************/
//
//   rem: function (val, base) {
//      var remSize = Math.round((val.value/base.value)*10000)/10000;
//        return new Dimension(remSize, 'rem');
//    }
//
//   nota: agregara a less/function/number.js
//   usar: rem(12px,16px) //  0.75rem 
///******************************************/
// pixel to rem sizes
@function-rem: ~ `eval('rem=function(pixel){return Math.round(1000*Number(pixel.split("px")[0])/"@{base}")/1000;};')`;
// pixel to em sizes
@function-em: ~ `eval('em=function(pixel, base){return Math.round(1000*Number(pixel.split("px")[0])/Number(base.split("px")[0]))/1000;};')`;
//
///******************************************/
//
.fnt-padding(@opc-size: 4) {
    @fontBase: 1rem * (@opc-size + 6) * 1/10;
    @padSup: @fontBase * (@opc-size + 3) * 1/20;
    @padLat: 1rem * (@opc-size + 1) * 15/100;
    @fnt-padding: @padSup @padLat;
}
//
///* if statement */
.if(@condition; @property; @value) when (@condition = true) {
    @{property}: @value;
}
//
///* properties size in rem unit */
.px-to-rem(@property; @sizeValue; @both: false;) {
    @pxValue: unit(@sizeValue);
    @remValue: (@pxValue / @base);
    .if (@both; @property; ~"@{pxValue}px");
    @{property}: ~"@{remValue}rem";
}
//
///* init @font-face */
.font-face(@opc-family, @opc-version, @font-path, @opc-name-font, @opc-embedded, @opc-data) {
    @selector: ~"@font-face";

    & when (@opc-embedded = true) {
        @{selector} {
            font-family: @opc-family;
            src: ~'url("@{font-path}/@{opc-name-font}.eot")';
            src: ~'url("@{font-path}/@{opc-name-font}.eot?#iefix") format("embedded-opentype")',
                ~'url("data:application/font-woff2;charset=utf-8;base64,@{opc-data}") format("woff2")',
                ~'url("@{font-path}/@{opc-name-font}.woff") format("woff")',
                ~'url("@{font-path}/@{opc-name-font}.ttf") format("truetype")',
                ~'url("@{font-path}/@{opc-name-font}.svg#fontcustom") format("svg")';
            font-weight: normal;
            font-style: normal;
        }
    }

    & when not (@opc-embedded = true) {
        @{selector} {
            font-family: @opc-family;
            src: ~'url("@{font-path}/@{opc-name-font}.eot")';
            src: ~'url("@{font-path}/@{opc-name-font}.eot?#iefix") format("embedded-opentype")',
                ~'url("@{font-path}/@{opc-name-font}.woff") format("woff")',
                ~'url("@{font-path}/@{opc-name-font}.ttf") format("truetype")',
                ~'url("@{font-path}/@{opc-name-font}.svg#fontcustom") format("svg")';
            font-weight: normal;
            font-style: normal;
        }
    }
}
//
.media-movil-first-small(@min; @property; @value) {
    .loop(@counter) when (@counter > 0) {
        .loop((@counter - 1));
        @p: extract(@property, @counter );
        @v: extract(@value, @counter );
        @{p}: @v;
    }

    @media screen and (min-width: @min) {
        .loop(length(@property));
    }
}
/* function ---------- [ + ] */@state: OK;
///******************************************/
///*  	FIN
///******************************************/